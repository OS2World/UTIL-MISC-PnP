 þ Brief docs for PnP Resource lister & diagnostic tool.


This program reports on the internals of Plug and Play (PnP) BIOS equippped
PC's. It displays all the PnP data the machine contains, allowing you to more
easily fault-find hardware conflicts as well as locate settings assigned to PnP
hardware. This code won't do anything on a machine that doesn't have a PnP
BIOS. 

This tool is best used if piped to a file ie: "pnp > logfile.txt" then use any
text reader/editor to view the results as they may span several pages. Since
PNP supprtos pipes, you can also do PNP | more and the like.

This tool only works properly if run from a plain boot - it will crash if run
under a memory manager or win95... probably because the system is in V86 mode
at those times, yet we always use real mode versions of all the function calls.



Comments to the author are welcomed:   chart@hyperlink.net.au
home page for updates:                 http://members.hyperlink.net.au/~chart

PLEASE get in contact with me if you wish to further the exploration and
documentation of PnP programming. Full source code is included so you too can
learn how to do PnP Programming... it's not that hard!!



 þ PnP Books.

I have two to recommend: "Programming Plug and Play" by James Kelsey, Sams
Publishing, 1995, ISBN 0-672-30703-0 and "Plug and Play System Architecture" by
Tom Shanley, Mindshare/Addison Wesley, ISBN 0-201-41013-3. Don't expect to
learn PnP programming without these books!



 þ "demo.log" is a sample file generated by my Pentium 133 system; included so
you can see how things are supposed to look -- in case you have problems
getting pnp to work on your machine, or wonder if what you're seeing is
'normal'.



 þ Commandline format:    PNP [N]

N is optional and specifies that you'd like to see the pnp data assigned for
the [N]ext boot, not the current boot (which is the default). Normally the two
are the same, but not always, espescially if you've just been messing around
with PnP card setup disks and the like, but have not yet re-booted.



 þ "Understanding" what you see on the screen.

PnP outputs 4 'sections' worth of information; each of which should 'agree'
with the other sections... if they don't, you may have a machine with stange
BIOS bugs... try "Reset ESCD data" option in your BIOS, if it has it.

The first 'section' displays the PnP info available from the PnP BIOS. Normally
this covers the "built into" motherboard devices only. This info is fairly
straight forward to interpret; just read it! Anything listed between "Alternat
config start" and "Alternate config end" represents other possible
configurations of that device - but they are NOT currently in use.

The second section displays info from PnPISA cards, if any are present.
Firstly, all the possible settings for that device are listed (good for finding
out if a certain card can be set to certain settings you might wish to use),
then the actual 'current' settings are displayed. PnPISA cards can have
several, possibly unrelated devices on the came card; for example most PnP
sound cards have the SoundBlaster compatable registers as one logical device,
the joystick port as another, and the Midi port as a third. PNP can now cope
with these cards correctly.

The third section tells you wether a static resource configuration exists or
not - This is used on PC's without an ESCD. At this time, the static resource
info is not displayed (Mostly because I never found a machine that actually
uses this function!).

The fourth section displays the ESCD. ESCD is a method of tying all PnP info
from ALL devices (regardless of type) into one massive data structure.. the
concept bieng that if all info is in one place it will be easiest to work
with.. In reality the ESCD fails in this task (although it does tie most info
together); it is necessary to 'double-check' it's contents for accuracy, etc as
some programs (espcially Win95) do rely on the ESCD. The ESCD should list PCI,
EISA, MCA & PnPISA devices, as well as systemboard resources and possibly even
non-PnP devices in some cases.




 þ Other Notes

At this time, PnP is incomplete. Some information is not yet decoded (you see a
message saying "tripped out on (big|small) code xx"), and there may be bugs in
the program. Please let me know of anything that doesn't work for you, and I'll
try to fix it. Please include an output of the program with your message - what
messages may appear should help me to work out 'what went wrong'.

Recently I've accomplised a lot - found a copy of the 'real' EISA specs (Thanks
Tony - you know who you are) and started work on the PnP database... this
project gets ever closer to completion, but still needs YOUR help!!! Please -
tell me if this programs helps you, nor not.. either way I'd like to know!!!






 þ PnP & Win95

On machins with an ESCD, Win95 may insert references to non-PnP devices without
your knowledge!!! This is, of course, to help the BIOS come up with a 'better'
working boot configuration (by helping the BIOS know about used resources that
the BIOS couldn't normally detect). This explains why (A) re-booting a
non-working win95 PC sometimes makes it work (and also why win95 wants to
reboot all the goddamn time when adding new hardware), and (B) also explains
how those entries got there in the first place.

Win95 removes entries from the ESCD when you delete a device from Device
Manager; *however* win95 won't remove ESCD entries it doesn't have device
manager entries for. Thus, the ESCD can be left in a state where 'false'
entries remain if a non-PnP device is removed from the system and, say, win95
is deleted, re-installed, etc at the same time without actually deleting the
existing non-PnP device from device manager first.

Some BIOS's have a "Reset Configuration data" CMOS setup option to erase the
ESCD and 'start over'. In this case, USE IT!!  If the BIOS doesn't have such a
function, you are in trouble!! I hope to offer a 'fix' for this soon. Stay
tuned!

Why does this happen?

It's a Catch 22 situation. Win95 only alters the ESCD according to changes made
in Device Manger. The BIOS only updates PnP info in the ESCD, not non-PnP info.
Win95 trusts the BIOS to have the ESCD info 'right' for devices it does not
have listed in it's device manager registry, and similarly the BIOS doesn't
delete any non-PnP entires other programs put there, as it is trusting that
those devices really do exist and need to be taken into account.

Each is trusting the other and nobody is doing the hosekeeping. Except us, when
we are armed with this program! Remember, this only applies to non-PnP devices
- namely Legacy VESA & ISA devices - it can never apply to PnP compatable
devices.

In my system, for example, my non PnP sound card gets it's resources listed in
the ESCD.. in turn, the BIOS knows not to use those resources anywhere else.








 þ Revision history


Version 0.03á

Added more pnpxxxx codes.. this may need a text database in future?!?!
Tidied up some display formatting errors
More decoding of ESCD info.. still need EISA specs to do this properly!!
A bug with one too many ESCD records being decoded fixed
Fixed up some ugliness with ESCD data structure code
General housekeeping



Version 0.04á

Made ESCD loop only as many times as header indicates devices... avoids
runtime error 201 on some systems. Increased ESCD buffer to 32kb max; just in
case as there seem to be a few 16kb ESCD's out there...



Version 0.05á

Added PnPISA freeform info partial decode & display; figured out how to read
PnPISA ID's finally!


Version 0.06á

Added ability to list alternate configuration info for PnP BIOS devices, and to
select the "now" or "next boot" option at runtime.

Tidyed up the ESCD display; raw hex-dump of data refined to hex-dump for each
device - much easier to read and understand.

Added 'h' hexadecimal indicator to all numbers displayed in hex format.

Added decoding of PnPISA card resources & general info.

A lot of 'behind the scenes' adjustments went on in this version, including
display reformatting, bugfixing, additional information, and also testing. I
feel that this is the most reliable version yet of this tool.. probably the
first version that could actually be useful in fault finding.



Version 0.07á

Added pnpid.txt; list of pnp resources that pnp.exe reads. Having the pnp
info in an easily updated seperate text file makes updating the list so much
easier.  We should read this during pnpisa operations to recongise pnpisa
'compatable' devices, but we don't. yet.


Version 0.08á

Fixed small bug with decoding LogicalDevID - found when testing a Dlink PnPISA
network card.

Fixed up display of allocated resources for PnPISA devices - no more long lists
of 'Not Assigned' confusing everyone.


Version 0.09á

Major work on ESCD info - I have 'deduced' the decoding of the majority of ESCD
data using the results of an ESCD exploration program written by Phoenix (BIOS).
I still don't have everything worked out, however it's MUCH better than what we
started with!!


Version 0.10á

Fixed bug with PnPISA cards that have more than one logical device; now we list
ALL the resources for all the logical devices... phew, that was confusing!

I have gotten hold of the 'offical' EISA standards (from BCPR Services); many
updates, corrections, blah blah from these standards. The program is now mostly
complete!

Program now attempts to identify any EISA type device ID's discovered
throughout the program, not just in the first section. Serious work on
maintaining pnpid.txt has begun and will get it's own webpage soon.


Version 0.12á

Fixed more bugs, added support for "ISA Memory range" PnPISA info type.

Version 0.13á

A quick-release to trial a bug-squash; helped but didn't fix all the problems.

Version 0.14á

Fixed a serious bug that caused all hell to break loose on most modern
motherboards - the PnP device node numbers are not always contiguous and so
a "for x=0 to numnodes" loop doen't work - one must test the tempnode variable
(see source) - the BIOS tells you the next valid node number to use.

Fixed up some display formatting issues - piping the program's output to a
file now works as per all my other programs, I/O ranges are more accurately
presented now.

